name: Build and Release WhatsTap2

on:
  push:
    branches:
      - main  # Triggers on every push to main branch
    tags:
      - 'v*'  # Also triggers on version tags (for manual releases)
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (integer)'
        required: true
        default: '1'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper tagging
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Determine version and tag strategy
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # Main branch push - generate version from timestamp and run number
          TIMESTAMP=$(date -u +%Y%m%d)
          VERSION_NAME="1.0.${TIMESTAMP}.${{ github.run_number }}"
          VERSION_CODE=${{ github.run_number }}
          TAG_NAME="v$VERSION_NAME"
          TRIGGER_TYPE="main_push"
          echo "Main branch push detected - will create version: $VERSION_NAME"
        elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Existing tag push
          VERSION_NAME=${GITHUB_REF#refs/tags/v}
          VERSION_CODE=${{ github.run_number }}
          TAG_NAME=${GITHUB_REF#refs/tags/}
          TRIGGER_TYPE="tag_push"
          echo "Using existing tag: $TAG_NAME"
        else
          # Manual trigger
          VERSION_NAME=${{ github.event.inputs.version_name }}
          VERSION_CODE=${{ github.event.inputs.version_code }}
          TAG_NAME="v$VERSION_NAME"
          TRIGGER_TYPE="manual"
          echo "Manual trigger - will create version: $VERSION_NAME"
        fi
        
        # Set outputs
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "TRIGGER_TYPE=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        echo "COMMIT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        
        echo "Building version: $VERSION_NAME ($VERSION_CODE)"
        echo "Tag: $TAG_NAME"
        echo "Trigger: $TRIGGER_TYPE"
        echo "Commit: ${GITHUB_SHA:0:8}"
        
    - name: Create keystore from secret
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks
        
    - name: Create keystore.properties
      run: |
        echo "storeFile=keystore.jks" > keystore.properties
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> keystore.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> keystore.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> keystore.properties
        
    - name: Update version in build.gradle
      run: |
        sed -i "s/versionCode [0-9]*/versionCode ${{ steps.version.outputs.VERSION_CODE }}/" app/build.gradle
        sed -i "s/versionName \".*\"/versionName \"${{ steps.version.outputs.VERSION_NAME }}\"/" app/build.gradle
        
    - name: Build Release APK
      run: ./gradlew assembleRelease
      
    - name: Build Release AAB
      run: ./gradlew bundleRelease
      
    - name: Sign and tag APK
      run: |
        # Sign APK
        $ANDROID_HOME/build-tools/34.0.0/apksigner sign \
          --ks app/keystore.jks \
          --ks-key-alias ${{ secrets.KEY_ALIAS }} \
          --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
          --key-pass pass:${{ secrets.KEY_PASSWORD }} \
          --out app/build/outputs/apk/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}-${{ steps.version.outputs.COMMIT_SHA }}.apk \
          app/build/outputs/apk/release/app-release-unsigned.apk
          
        # Create a copy with simple name for release
        cp app/build/outputs/apk/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}-${{ steps.version.outputs.COMMIT_SHA }}.apk \
           app/build/outputs/apk/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.apk
          
    - name: Sign and tag AAB
      run: |
        # Sign AAB
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore app/keystore.jks \
          -storepass ${{ secrets.KEYSTORE_PASSWORD }} \
          -keypass ${{ secrets.KEY_PASSWORD }} \
          app/build/outputs/bundle/release/app-release.aab \
          ${{ secrets.KEY_ALIAS }}
          
        # Create tagged copy
        cp app/build/outputs/bundle/release/app-release.aab \
           app/build/outputs/bundle/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}-${{ steps.version.outputs.COMMIT_SHA }}.aab
           
        # Create simple name copy for release
        cp app/build/outputs/bundle/release/app-release.aab \
           app/build/outputs/bundle/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.aab
          
    - name: Verify APK signature
      run: |
        $ANDROID_HOME/build-tools/34.0.0/apksigner verify \
          app/build/outputs/apk/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.apk
          
    - name: Generate build metadata
      id: build_info
      run: |
        APK_SIZE=$(du -h app/build/outputs/apk/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.apk | cut -f1)
        AAB_SIZE=$(du -h app/build/outputs/bundle/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.aab | cut -f1)
        echo "APK_SIZE=$APK_SIZE" >> $GITHUB_OUTPUT
        echo "AAB_SIZE=$AAB_SIZE" >> $GITHUB_OUTPUT
        
        # Generate checksums for verification
        APK_SHA256=$(sha256sum app/build/outputs/apk/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.apk | cut -d' ' -f1)
        AAB_SHA256=$(sha256sum app/build/outputs/bundle/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.aab | cut -d' ' -f1)
        echo "APK_SHA256=$APK_SHA256" >> $GITHUB_OUTPUT
        echo "AAB_SHA256=$AAB_SHA256" >> $GITHUB_OUTPUT
        
        # Get APK info if aapt is available
        if command -v aapt &> /dev/null; then
          APK_INFO=$(aapt dump badging app/build/outputs/apk/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.apk | grep -E "(package|application-label|versionCode|versionName)" | head -4)
          echo "APK_INFO<<EOF" >> $GITHUB_OUTPUT
          echo "$APK_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
        echo "‚úÖ Build successful! Artifacts created:"
        echo "- APK: WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.apk ($APK_SIZE)"
        echo "- AAB: WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.aab ($AAB_SIZE)"
        echo "- APK SHA256: $APK_SHA256"
        echo "- AAB SHA256: $AAB_SHA256"
        
    - name: Create git tag (only if build successful)
      if: steps.version.outputs.TRIGGER_TYPE == 'main_push' || steps.version.outputs.TRIGGER_TYPE == 'manual'
      run: |
        # Configure git for tagging
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check if tag already exists
        if git rev-parse "${{ steps.version.outputs.TAG_NAME }}" >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Tag ${{ steps.version.outputs.TAG_NAME }} already exists, skipping tag creation"
        else
          echo "üè∑Ô∏è Creating new tag: ${{ steps.version.outputs.TAG_NAME }}"
          git tag -a "${{ steps.version.outputs.TAG_NAME }}" -m "Release ${{ steps.version.outputs.TAG_NAME }} - Auto-generated from main branch push"
          git push origin "${{ steps.version.outputs.TAG_NAME }}"
          echo "‚úÖ Tag created and pushed successfully"
        fi
        
    - name: Create Release (only if build successful)
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.TAG_NAME }}
        name: WhatsTap2 ${{ steps.version.outputs.TAG_NAME }}
        body: |
          ## WhatsTap2 ${{ steps.version.outputs.TAG_NAME }}
          
          **A Simple Contact Launcher for Grandparents** üì±‚ù§Ô∏è
          
          ### üöÄ Auto-Release Information
          - **Trigger**: ${{ steps.version.outputs.TRIGGER_TYPE == 'main_push' && 'Automatic (main branch push)' || steps.version.outputs.TRIGGER_TYPE == 'manual' && 'Manual trigger' || 'Tag push' }}
          - **Commit**: [`${{ steps.version.outputs.COMMIT_SHA }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - **Built**: ${{ steps.version.outputs.BUILD_TIME }} UTC
          - **Workflow**: [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### üì¶ Downloads
          - **APK**: For direct installation on Android devices
          - **AAB**: For Google Play Store distribution
          
          ### üìä Build Information
          - **Version**: ${{ steps.version.outputs.VERSION_NAME }} (Build ${{ steps.version.outputs.VERSION_CODE }})
          - **Git Tag**: `${{ steps.version.outputs.TAG_NAME }}`
          - **APK Size**: ${{ steps.build_info.outputs.APK_SIZE }}
          - **AAB Size**: ${{ steps.build_info.outputs.AAB_SIZE }}
          
          ### üîê Verification
          ```
          APK SHA256: ${{ steps.build_info.outputs.APK_SHA256 }}
          AAB SHA256: ${{ steps.build_info.outputs.AAB_SHA256 }}
          ```
          
          ### üöÄ Installation Instructions
          
          #### For Direct Installation (APK)
          1. Download the APK file below
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK on your device
          4. Grant required permissions when prompted
          
          #### For Google Play Store (AAB)
          - Use the AAB file for uploading to Google Play Console
          
          ### üîß Setup Instructions
          1. **Star Important Contacts**: In the phone's contacts app, star (‚≠ê) family members
          2. **Add WhatsApp Labels**: For WhatsApp contacts, add "WhatsApp" in the phone number label
          3. **Sync Contacts**: Open WhatsTap2 and tap the sync button (üîÑ)
          4. **Start Calling**: Tap contact photos to call them easily!
          
          ### üéØ Features
          - ‚úÖ One-tap calling for starred contacts
          - ‚úÖ Automatic WhatsApp video call detection
          - ‚úÖ Large, senior-friendly interface
          - ‚úÖ Duplicate contact prevention
          - ‚úÖ Smart phone number matching
          
          ---
          
          **Made with ‚ù§Ô∏è for keeping families connected**
          
          *This release was automatically generated from a successful build.*
        files: |
          app/build/outputs/apk/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.apk
          app/build/outputs/bundle/release/WhatsTap2-${{ steps.version.outputs.TAG_NAME }}.aab
        draft: false
        prerelease: false
        
    - name: Clean up keystore
      if: always()
      run: |
        rm -f app/keystore.jks
        rm -f keystore.properties
        
    - name: Build Summary
      if: always()
      run: |
        echo "üéâ WhatsTap2 Build and Release Summary"
        echo "====================================="
        echo "Trigger: ${{ steps.version.outputs.TRIGGER_TYPE }}"
        echo "Version: ${{ steps.version.outputs.VERSION_NAME }}"
        echo "Tag: ${{ steps.version.outputs.TAG_NAME }}"
        echo "Commit: ${{ steps.version.outputs.COMMIT_SHA }}"
        echo "Status: ${{ job.status }}"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Build completed successfully!"
          echo "üè∑Ô∏è Tag created: ${{ steps.version.outputs.TAG_NAME }}"
          echo "üì¶ Release published with artifacts"
          echo "üîó View release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.TAG_NAME }}"
        else
          echo "‚ùå Build failed - no tag or release created"
        fi 